<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    					http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
    					http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
    					http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    					http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

   	<context:annotation-config/>
   	<context:component-scan base-package="org.miscellaneous.tutorials"/>
   	<tx:annotation-driven/>
   	<aop:aspectj-autoproxy/>
   
    <bean id="helloWorld" class="org.miscellaneous.tutorials.HelloWorld"/>
   
  	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
	   	<property name="url" value="jdbc:postgresql://localhost:5432/miscellaneousDb"/>
	   	<property name="username" value="postgres"/>
	   	<property name="password" value="postgres"/>
  	</bean>
   
  	<!-- 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
   		<property name="dataSource" ref="dataSource"/>
   	</bean>
   	 -->
   	 
   	 <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
   	 	<property name="dataSource" ref="dataSource"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
			</props>
		</property>
		<property name="annotatedClasses" ref="annotatedClasses" />
   	 </bean>
   	 
   	 <util:list id="annotatedClasses">
   	 	<value>org.miscellaneous.tutorials.domain.Book</value>
   	 	<value>org.miscellaneous.tutorials.domain.Author</value>
   	 </util:list>
   	 
   	 <bean id="bookDaoImpl" class="org.miscellaneous.tutorials.dao.BookDaoImpl">
   	 	<property name="sessionFactory" ref="sessionFactory"/>
   	 </bean>
   	 
   	 <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
   	 	<property name="sessionFactory" ref="sessionFactory"/>
   	 </bean>
   	 
   	 <bean id="gBookDaoImpl" class="org.miscellaneous.tutorials.dao.GBookDaoImpl">
   	 	<property name="sessionFactory" ref="sessionFactory"/>
   	 </bean>
   	 
   	 <aop:config>
   	 	<aop:aspect id="loggingAspect" ref="loggingBean">
   	 		<aop:pointcut id="logPointCut" expression="execution(* org.miscellaneous.tutorials.service.*.* (..))" />
			<aop:before method="doLogThis" pointcut-ref="logPointCut"/>
   	 	</aop:aspect>
   	 	<!-- Commented xml based config of this aspect and implemented via @Aspect annotation. 
   	 	<aop:aspect id="returnAspect" ref="loggingBean">
   	 		<aop:pointcut id="returnPointCut" expression="execution(* org.miscellaneous.tutorials.service.BookServiceImpl.getBook(long))"/>
			<aop:around method="doLogAroundThis" pointcut-ref="returnPointCut"/>			   	 	
   	 	</aop:aspect> -->
   	 </aop:config>
   	 
   	 <bean id="loggingBean" class="org.miscellaneous.tutorials.aop.LoggingAspect"/>
   	 
   	 
   	<!--  <bean id="bookServiceImpl" class="org.miscellaneous.tutorials.service.BookServiceImpl">
   	 	<property name="bookDao" ref="bookDaoImpl"/>
   	 </bean> -->
</beans>